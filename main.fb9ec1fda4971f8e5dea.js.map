{"version":3,"file":"main.fb9ec1fda4971f8e5dea.js","mappings":"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","sources":["webpack://savior/webpack/runtime/chunk loaded","webpack://savior/./src/config/gameConfig.js","webpack://savior/./src/hooks/useGameState.js","webpack://savior/./src/components/GameSetup.js","webpack://savior/./src/components/PlayerStats.js","webpack://savior/./src/components/FinancialDashboard.js","webpack://savior/./src/components/QuestLog.js","webpack://savior/./src/components/CityMap.js","webpack://savior/./src/components/BudgetManagement.js","webpack://savior/./src/components/ExpenseSummary.js","webpack://savior/./src/components/Achievements.js","webpack://savior/./src/components/GameInterface.js","webpack://savior/./src/components/FinancialAdventureGame.js","webpack://savior/./src/App.js","webpack://savior/./src/index.js","webpack://savior/webpack/bootstrap","webpack://savior/webpack/runtime/hasOwnProperty shorthand","webpack://savior/webpack/runtime/jsonp chunk loading","webpack://savior/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// Financial categories\r\nexport const allCategories = [\r\n  { name: 'Housing', color: '#FF6B6B', icon: '🏠' },\r\n  { name: 'Food', color: '#4ECDC4', icon: '🍽️' },\r\n  { name: 'Transportation', color: '#45B7D1', icon: '🚗' },\r\n  { name: 'Utilities', color: '#FF9F1C', icon: '💡' },\r\n  { name: 'Insurance', color: '#2EC4B6', icon: '🛡️' },\r\n  { name: 'Medical & Healthcare', color: '#E71D36', icon: '🏥' },\r\n  { name: 'Savings', color: '#4D9DE0', icon: '💰' },\r\n  { name: 'Debt Payments', color: '#7B2D26', icon: '💳' },\r\n  { name: 'Personal Spending', color: '#3D5A80', icon: '🛍️' },\r\n  { name: 'Recreation & Entertainment', color: '#FF5733', icon: '🎭' },\r\n  { name: 'Clothing', color: '#9B59B6', icon: '👕' },\r\n  { name: 'Education', color: '#F4A261', icon: '📚' },\r\n  { name: 'Childcare', color: '#2ECC71', icon: '👶' },\r\n  { name: 'Investments', color: '#27AE60', icon: '📈' },\r\n  { name: 'Gifts & Donations', color: '#E67E22', icon: '🎁' },\r\n  { name: 'Business Expenses', color: '#34495E', icon: '💼' },\r\n  { name: 'Pet Care', color: '#D35400', icon: '🐾' },\r\n  { name: 'Travel', color: '#16A085', icon: '✈️' },\r\n  { name: 'Technology', color: '#8E44AD', icon: '💻' },\r\n  { name: 'Subscriptions', color: '#2980B9', icon: '📱' },\r\n];\r\n\r\n// Achievements\r\nexport const achievements = [\r\n  { name: 'Saver Starter', description: 'Reach your savings goal', icon: '🌱', reached: false },\r\n  { name: 'Budget Master', description: 'Stay under budget for a week', icon: '🏆', reached: false },\r\n  { name: 'Expense Ninja', description: 'Track expenses for 5 days in a row', icon: '🥷', reached: false },\r\n  { name: 'Category Conqueror', description: 'Stay under budget in all categories for a month', icon: '🏅', reached: false },\r\n  { name: 'Savings Superstar', description: 'Save 20% of your income for 3 months in a row', icon: '🌟', reached: false },\r\n];\r\n\r\n// Months\r\nexport const months = [\r\n  'January', 'February', 'March', 'April', 'May', 'June',\r\n  'July', 'August', 'September', 'October', 'November', 'December'\r\n];\r\n\r\n// Locations\r\nexport const locations = [\r\n  'Home',\r\n  'Work District',\r\n  'Shopping Center',\r\n  'Financial District',\r\n  'Park',\r\n  'University'\r\n];\r\n\r\n// Initial quests\r\nexport const initialQuests = [\r\n  \"Visit the Financial District to learn about investing\",\r\n  \"Find a side hustle at the Work District\"\r\n];\r\n\r\n// Initial game state\r\nexport const initialGameState = {\r\n  totalIncome: 0,\r\n  incomeInput: '',\r\n  gameStarted: false,\r\n  setupStep: 0,\r\n  totalSpent: 0,\r\n  selectedCategories: [],\r\n  categories: [],\r\n  categoryInputs: {},\r\n  expenses: [],\r\n  selectedCategory: null,\r\n  inputAmount: '',\r\n  message: '',\r\n  score: 1000,\r\n  scoreBreakdown: { base: 1000 },\r\n  streak: 0,\r\n  lastPlayDate: null,\r\n  playerAchievements: achievements,\r\n  currentMonth: new Date().getMonth(),\r\n  currentYear: new Date().getFullYear(),\r\n  currentLocation: 'Home',\r\n  questLog: initialQuests,\r\n  playerLevel: 1,\r\n  story: 'Welcome to Prosperity City! Your financial adventure begins...'\r\n};\r\n\r\n// Story templates\r\nexport const storyTemplates = {\r\n  incomeSetup: (income) => `Great! You're starting your journey with a monthly income of $${income}. Now, let's choose your financial priorities.`,\r\n  categorySelection: \"Excellent choices! Now, let's allocate your income across these categories. Remember, balancing your budget is key to financial success!\",\r\n  gameStart: \"Congratulations! You've set up your initial budget. Your adventure in Prosperity City begins now. Explore the city, complete quests, and make wise financial decisions to prosper!\",\r\n  questComplete: (level) => `Congratulations! You completed a quest and gained valuable financial experience. Your level is now ${level}!`,\r\n  locations: {\r\n    Home: \"You're at home. It's a great place to review your budget and plan your next financial move.\",\r\n    'Work District': \"Welcome to the Work District! Here you can find new job opportunities or side hustles to increase your income.\",\r\n    'Shopping Center': \"You've entered the Shopping Center. Remember to stick to your budget while enjoying some retail therapy!\",\r\n    'Financial District': \"Welcome to the Financial District! Here you can learn about investments and grow your wealth.\",\r\n    Park: \"You're at the park. Sometimes the best things in life are free! Enjoy nature and plan your next financial move.\",\r\n    University: \"Welcome to the University! Investing in your education can lead to better career opportunities and higher income.\"\r\n  },\r\n  expenses: {\r\n    Housing: (amount) => `You spent $${amount} on housing. A comfortable home is important, but remember to balance it with other expenses.`,\r\n    Food: (amount) => `You spent $${amount} on food. Eating well is crucial, but look for ways to save without sacrificing nutrition.`,\r\n    Transportation: (amount) => `You spent $${amount} on transportation. Consider if there are more cost-effective ways to get around.`,\r\n    Utilities: (amount) => `You paid $${amount} for utilities. Look into energy-saving measures to reduce these costs over time.`,\r\n    Insurance: (amount) => `You spent $${amount} on insurance. It's a necessary expense, but shop around for the best rates.`,\r\n    \"Medical & Healthcare\": (amount) => `You spent $${amount} on healthcare. Your health is wealth, but explore preventive measures to reduce costs.`,\r\n    Savings: (amount) => `Great job! You saved $${amount}. Keep building your financial safety net.`,\r\n    \"Debt Payments\": (amount) => `You paid $${amount} towards debt. Stay consistent, and you'll be debt-free before you know it!`,\r\n    \"Personal Spending\": (amount) => `You spent $${amount} on personal items. It's okay to treat yourself, but make sure it aligns with your financial goals.`,\r\n    \"Recreation & Entertainment\": (amount) => `You spent $${amount} on entertainment. Life is for living, but look for free or low-cost alternatives too.`,\r\n    Clothing: (amount) => `You spent $${amount} on clothing. Style is important, but consider if you're getting the best value for your money.`,\r\n    Education: (amount) => `You invested $${amount} in education. Knowledge is power, and this could lead to better opportunities!`,\r\n    Childcare: (amount) => `You spent $${amount} on childcare. It's a big expense, but crucial for working parents. Look into any available subsidies or tax credits.`,\r\n    Investments: (amount) => `You invested $${amount}. Great move! Keep an eye on your investments and diversify for long-term growth.`,\r\n    \"Gifts & Donations\": (amount) => `You spent $${amount} on gifts or donations. Generosity is admirable, but ensure it fits within your budget.`,\r\n    \"Business Expenses\": (amount) => `You spent $${amount} on business expenses. Investing in your business can lead to future profits, but track these expenses carefully.`,\r\n    \"Pet Care\": (amount) => `You spent $${amount} on pet care. Our furry friends are important, but look for ways to save on their care when possible.`,\r\n    Travel: (amount) => `You spent $${amount} on travel. Experiences are invaluable, but plan ahead to get the best deals.`,\r\n    Technology: (amount) => `You spent $${amount} on technology. Stay up-to-date, but consider if each purchase is necessary and cost-effective.`,\r\n    Subscriptions: (amount) => `You spent $${amount} on subscriptions. These can add up quickly, so regularly review if you're getting value from each one.`\r\n  }\r\n};\r\n\r\n// Game constants\r\nexport const GAME_CONSTANTS = {\r\n  MAX_CATEGORIES: 6,\r\n  BASE_SCORE: 1000,\r\n  QUEST_COMPLETION_SCORE: 100,\r\n  ACHIEVEMENT_SCORE: 50,\r\n  STREAK_BONUS: 10,\r\n  OVERSPENDING_PENALTY: 100,\r\n  SAVINGS_GOAL_PERCENTAGE: 0.2,\r\n  EXPENSE_TRACKING_STREAK: 5\r\n};\r\n\r\n// Utility functions\r\nexport const calculateScore = (gameState) => {\r\n  let newScore = GAME_CONSTANTS.BASE_SCORE;\r\n  let newScoreBreakdown = { base: GAME_CONSTANTS.BASE_SCORE };\r\n\r\n  const totalBudget = gameState.categories.reduce((sum, cat) => sum + cat.budget, 0);\r\n  const totalSpent = gameState.expenses.reduce((sum, exp) => sum + exp.spent, 0);\r\n\r\n  // Budget bonus\r\n  if (totalSpent <= totalBudget) {\r\n    const budgetBonus = Math.floor((1 - totalSpent / totalBudget) * 500);\r\n    newScore += budgetBonus;\r\n    newScoreBreakdown.budgetBonus = budgetBonus;\r\n  }\r\n\r\n  // Overspending penalty\r\n  const overspentCategories = gameState.expenses.filter(exp => exp.spent > exp.budget);\r\n  if (overspentCategories.length > 0) {\r\n    const overspendingPenalty = overspentCategories.length * GAME_CONSTANTS.OVERSPENDING_PENALTY;\r\n    newScore -= overspendingPenalty;\r\n    newScoreBreakdown.overspendingPenalty = -overspendingPenalty;\r\n  }\r\n\r\n  // Streak bonus\r\n  const streakBonus = gameState.streak * GAME_CONSTANTS.STREAK_BONUS;\r\n  newScore += streakBonus;\r\n  newScoreBreakdown.streakBonus = streakBonus;\r\n\r\n  // Quest and level bonus\r\n  const questBonus = gameState.playerLevel * GAME_CONSTANTS.QUEST_COMPLETION_SCORE;\r\n  newScore += questBonus;\r\n  newScoreBreakdown.questBonus = questBonus;\r\n\r\n  return { newScore, newScoreBreakdown };\r\n};\r\n\r\nexport default {\r\n  allCategories,\r\n  achievements,\r\n  months,\r\n  locations,\r\n  initialQuests,\r\n  initialGameState,\r\n  storyTemplates,\r\n  GAME_CONSTANTS,\r\n  calculateScore\r\n};","import { useState, useEffect } from 'react';\r\nimport { initialGameState } from '../config/gameConfig';\r\n\r\nexport const useGameState = () => {\r\n  const [gameState, setGameState] = useState(() => {\r\n    const savedState = localStorage.getItem('gameState');\r\n    console.log('Initial state:', savedState ? JSON.parse(savedState) : initialGameState);\r\n    return savedState ? JSON.parse(savedState) : initialGameState;\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log('Updating localStorage:', gameState);\r\n    localStorage.setItem('gameState', JSON.stringify(gameState));\r\n  }, [gameState]);\r\n\r\n  const updateGameState = (newState) => {\r\n    console.log('Updating state:', newState);\r\n    setGameState(prevState => {\r\n      const updatedState = { ...prevState, ...newState };\r\n      console.log('Updated state:', updatedState);\r\n      return updatedState;\r\n    });\r\n  };\r\n\r\n  return [gameState, updateGameState];\r\n};\r\n\r\nexport default useGameState;","import React from 'react';\r\nimport { GAME_CONSTANTS } from '../config/gameConfig';\r\nimport { allCategories } from '../config/gameConfig';\r\n\r\nconst GameSetup = ({ gameState, setGameState }) => {\r\n  const handleIncomeSubmit = () => {\r\n    const income = parseFloat(gameState.incomeInput);\r\n    if (!isNaN(income) && income > 0) {\r\n      setGameState(prevState => ({\r\n        totalIncome: income,\r\n        setupStep: 1,\r\n        story: `Great! You're starting your journey with a monthly income of $${income}. Now, let's choose your financial priorities.`\r\n      }));\r\n    } else {\r\n      setGameState(prevState => ({ message: 'Please enter a valid income amount' }));\r\n    }\r\n  };\r\n\r\n  const handleCategorySelection = (category) => {\r\n    setGameState(prevState => {\r\n      if (prevState.selectedCategories.includes(category)) {\r\n        return { selectedCategories: prevState.selectedCategories.filter(cat => cat !== category) };\r\n      } else if (prevState.selectedCategories.length < GAME_CONSTANTS.MAX_CATEGORIES) {\r\n        return { selectedCategories: [...prevState.selectedCategories, category] };\r\n      } else {\r\n        return { message: `You can select up to ${GAME_CONSTANTS.MAX_CATEGORIES} categories` };\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCategorySelectionComplete = () => {\r\n    if (gameState.selectedCategories.length > 0) {\r\n      setGameState(prevState => ({\r\n        categories: prevState.selectedCategories.map(cat => ({ ...cat, budget: 0 })),\r\n        categoryInputs: prevState.selectedCategories.reduce((acc, cat) => ({...acc, [cat.name]: ''}), {}),\r\n        setupStep: 2,\r\n        story: \"Excellent choices! Now, let's allocate your income across these categories. Remember, balancing your budget is key to financial success!\"\r\n      }));\r\n    } else {\r\n      setGameState(prevState => ({ message: 'Please select at least one category' }));\r\n    }\r\n  };\r\n\r\n  const handleCategoryBudgetChange = (category, value) => {\r\n    setGameState(prevState => ({\r\n      categoryInputs: {...prevState.categoryInputs, [category]: value}\r\n    }));\r\n  };\r\n\r\n  const handleCategoryBudgetsSubmit = () => {\r\n    const budgets = Object.entries(gameState.categoryInputs).map(([name, budget]) => ({\r\n      name,\r\n      budget: parseFloat(budget),\r\n      ...gameState.selectedCategories.find(cat => cat.name === name)\r\n    }));\r\n\r\n    if (budgets.some(cat => isNaN(cat.budget) || cat.budget < 0)) {\r\n      setGameState(prevState => ({ message: 'Please enter valid budget amounts for all categories' }));\r\n      return;\r\n    }\r\n\r\n    const totalBudget = budgets.reduce((sum, cat) => sum + cat.budget, 0);\r\n    if (totalBudget > gameState.totalIncome) {\r\n      setGameState(prevState => ({ message: 'Total category budgets exceed your income. Please adjust.' }));\r\n      return;\r\n    }\r\n\r\n    setGameState(prevState => ({\r\n      categories: budgets,\r\n      expenses: budgets.map(cat => ({ ...cat, spent: 0 })),\r\n      gameStarted: true,\r\n      story: \"Congratulations! You've set up your initial budget. Your adventure in Prosperity City begins now. Explore the city, complete quests, and make wise financial decisions to prosper!\"\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"font-sans\">\r\n      <h1 className=\"text-3xl font-bold text-center mb-6\">Financial Adventure: Road to Prosperity</h1>\r\n      {gameState.setupStep === 0 && (\r\n        <>\r\n          <p className=\"mb-4\">Welcome, adventurer! Before you begin your journey in Prosperity City, let's set up your initial finances.</p>\r\n          <input\r\n            type=\"number\"\r\n            value={gameState.incomeInput}\r\n            onChange={(e) => {\r\n              console.log('Input value:', e.target.value);\r\n              updateGameState({ incomeInput: e.target.value });\r\n             }}\r\n             placeholder=\"Enter your starting monthly income\"\r\n             className=\"w-full p-2 mb-4 border rounded\"\r\n          />\r\n          <button\r\n            onClick={handleIncomeSubmit}\r\n            className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n          >\r\n            Set Starting Income\r\n          </button>\r\n        </>\r\n      )}\r\n      {gameState.setupStep === 1 && (\r\n        <>\r\n          <h2 className=\"text-xl font-semibold mb-4\">Select up to {GAME_CONSTANTS.MAX_CATEGORIES} Financial Categories</h2>\r\n          <div className=\"grid grid-cols-2 gap-2 mb-4\">\r\n            {gameState.allCategories.map(category => (\r\n              <button\r\n                key={category.name}\r\n                onClick={() => handleCategorySelection(category)}\r\n                className={`p-2 rounded ${\r\n                  gameState.selectedCategories.includes(category) \r\n                    ? `bg-${category.color} text-white` \r\n                    : 'bg-gray-200'\r\n                }`}\r\n              >\r\n                {category.icon} {category.name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <button\r\n            onClick={handleCategorySelectionComplete}\r\n            className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n          >\r\n            Continue to Budget Allocation\r\n          </button>\r\n        </>\r\n      )}\r\n      {gameState.setupStep === 2 && (\r\n        <>\r\n          <h2 className=\"text-xl font-semibold mb-4\">Allocate Your Monthly Budget</h2>\r\n          {gameState.selectedCategories.map(cat => (\r\n            <div key={cat.name} className=\"mb-4\">\r\n              <label className=\"block mb-2\">{cat.name}</label>\r\n              <input\r\n                type=\"number\"\r\n                value={gameState.categoryInputs[cat.name]}\r\n                onChange={(e) => handleCategoryBudgetChange(cat.name, e.target.value)}\r\n                placeholder={`Enter budget for ${cat.name}`}\r\n                className=\"w-full p-2 border rounded\"\r\n              />\r\n            </div>\r\n          ))}\r\n          <button\r\n            onClick={handleCategoryBudgetsSubmit}\r\n            className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n          >\r\n            Start Your Financial Adventure!\r\n          </button>\r\n        </>\r\n      )}\r\n      <div className=\"text-center mt-4 text-gray-600\">{gameState.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameSetup;","import React from 'react';\r\n\r\nconst PlayerStats = ({ gameState }) => {\r\n  const { playerLevel, currentLocation, score, streak } = gameState;\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-xl font-semibold mb-2\">Player Stats</h2>\r\n      <p>Level: {playerLevel}</p>\r\n      <p>Location: {currentLocation}</p>\r\n      <p>Score: {score} 🌟</p>\r\n      <p>Streak: {streak} days 🔥</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerStats;","import React from 'react';\r\nimport { months } from '../config/gameConfig';\r\n\r\nconst FinancialDashboard = ({ gameState }) => {\r\n  const { currentMonth, currentYear, totalSpent, totalIncome } = gameState;\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-xl font-semibold mb-2\">Financial Dashboard</h2>\r\n      <p>Current Month: {months[currentMonth]} {currentYear}</p>\r\n      <p className={totalSpent <= totalIncome ? 'text-green-500' : 'text-red-500'}>\r\n        Spent: ${totalSpent.toFixed(2)} / ${totalIncome.toFixed(2)}\r\n      </p>\r\n      <p className={(totalIncome - totalSpent) >= 0 ? 'text-green-500' : 'text-red-500'}>\r\n        Remaining: ${(totalIncome - totalSpent).toFixed(2)}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinancialDashboard;","import React from 'react';\r\n\r\nconst QuestLog = ({ gameState, setGameState }) => {\r\n  const { questLog } = gameState;\r\n\r\n  const completeQuest = (questIndex) => {\r\n    setGameState(prevState => ({\r\n      questLog: prevState.questLog.filter((_, index) => index !== questIndex),\r\n      playerLevel: prevState.playerLevel + 1,\r\n      score: prevState.score + 100,\r\n      story: `Congratulations! You completed a quest and gained valuable financial experience. Your level is now ${prevState.playerLevel + 1}!`\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-xl font-semibold mb-2\">Quest Log</h2>\r\n      <ul className=\"list-disc pl-5\">\r\n        {questLog.map((quest, index) => (\r\n          <li key={index} className=\"flex justify-between items-center\">\r\n            <span>{quest}</span>\r\n            <button \r\n              onClick={() => completeQuest(index)}\r\n              className=\"bg-green-500 text-white px-2 py-1 rounded text-sm\"\r\n            >\r\n              Complete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestLog;","import React from 'react';\r\n\r\nconst locations = ['Home', 'Work District', 'Shopping Center', 'Financial District', 'Park', 'University'];\r\n\r\nconst CityMap = ({ gameState, setGameState }) => {\r\n  const handleLocationChange = (newLocation) => {\r\n    setGameState(prevState => ({\r\n      currentLocation: newLocation,\r\n      story: updateStoryBasedOnLocation(newLocation)\r\n    }));\r\n  };\r\n\r\n  const updateStoryBasedOnLocation = (location) => {\r\n    // This function should be moved to a utility file in a real application\r\n    switch(location) {\r\n      case 'Home':\r\n        return \"You're at home. It's a great place to review your budget and plan your next financial move.\";\r\n      case 'Work District':\r\n        return \"Welcome to the Work District! Here you can find new job opportunities or side hustles to increase your income.\";\r\n      case 'Shopping Center':\r\n        return \"You've entered the Shopping Center. Remember to stick to your budget while enjoying some retail therapy!\";\r\n      case 'Financial District':\r\n        return \"Welcome to the Financial District! Here you can learn about investments and grow your wealth.\";\r\n      case 'Park':\r\n        return \"You're at the park. Sometimes the best things in life are free! Enjoy nature and plan your next financial move.\";\r\n      case 'University':\r\n        return \"Welcome to the University! Investing in your education can lead to better career opportunities and higher income.\";\r\n      default:\r\n        return \"You're exploring Prosperity City. What financial adventures await you today?\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-6\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">Prosperity City Map</h2>\r\n      <div className=\"grid grid-cols-3 gap-2\">\r\n        {locations.map(location => (\r\n          <button\r\n            key={location}\r\n            onClick={() => handleLocationChange(location)}\r\n            className={`p-2 rounded ${gameState.currentLocation === location ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\r\n          >\r\n            {location}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityMap;","import React from 'react';\r\n\r\nconst BudgetManagement = ({ gameState, setGameState }) => {\r\n  const handleCategoryClick = (category) => {\r\n    setGameState(prevState => ({\r\n      selectedCategory: category,\r\n      message: `Selected: ${category.name}`\r\n    }));\r\n  };\r\n\r\n  const handleAddExpense = () => {\r\n    if (gameState.selectedCategory && gameState.inputAmount && !isNaN(gameState.inputAmount)) {\r\n      const amount = parseFloat(gameState.inputAmount);\r\n      setGameState(prevState => ({\r\n        expenses: prevState.expenses.map(exp =>\r\n          exp.name === prevState.selectedCategory.name\r\n            ? { ...exp, spent: exp.spent + amount }\r\n            : exp\r\n        ),\r\n        totalSpent: prevState.totalSpent + amount,\r\n        message: `Added $${amount} to ${prevState.selectedCategory.name}`,\r\n        inputAmount: '',\r\n        selectedCategory: null\r\n      }));\r\n      // Note: You might want to call checkAchievements and calculateScore here\r\n    } else {\r\n      setGameState({ message: 'Please select a category and enter a valid amount' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-6\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">Budget Management</h2>\r\n      <div className=\"grid grid-cols-2 gap-2 mb-4\">\r\n        {gameState.categories.map(category => (\r\n          <button\r\n            key={category.name}\r\n            onClick={() => handleCategoryClick(category)}\r\n            className={`p-2 rounded text-white`}\r\n            style={{backgroundColor: category.color}}\r\n          >\r\n            <div className=\"text-2xl\">{category.icon}</div>\r\n            <div>{category.name}</div>\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"number\"\r\n        value={gameState.inputAmount}\r\n        onChange={(e) => setGameState({ inputAmount: e.target.value })}\r\n        placeholder=\"Enter amount\"\r\n        className=\"w-full p-2 mb-2 border rounded\"\r\n      />\r\n      <button\r\n        onClick={handleAddExpense}\r\n        className=\"w-full p-2 mb-4 bg-green-500 text-white rounded hover:bg-green-600 transition-colors\"\r\n      >\r\n        Add Expense\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BudgetManagement;","import React from 'react';\r\n\r\nconst ExpenseSummary = ({ gameState, setGameState }) => {\r\n  const handleEditExpense = (categoryName, newAmount) => {\r\n    setGameState(prevState => ({\r\n      expenses: prevState.expenses.map(exp =>\r\n        exp.name === categoryName\r\n          ? { ...exp, spent: parseFloat(newAmount) }\r\n          : exp\r\n      ),\r\n      totalSpent: prevState.totalSpent - prevState.expenses.find(exp => exp.name === categoryName).spent + parseFloat(newAmount),\r\n      message: `Updated expense for ${categoryName}`\r\n    }));\r\n    // Note: You might want to call checkAchievements and calculateScore here\r\n  };\r\n\r\n  const handleDeleteExpense = (categoryName) => {\r\n    const expenseToDelete = gameState.expenses.find(exp => exp.name === categoryName);\r\n    setGameState(prevState => ({\r\n      expenses: prevState.expenses.map(exp =>\r\n        exp.name === categoryName ? { ...exp, spent: 0 } : exp\r\n      ),\r\n      totalSpent: prevState.totalSpent - expenseToDelete.spent,\r\n      message: `Deleted expense for ${categoryName}`\r\n    }));\r\n    // Note: You might want to call checkAchievements and calculateScore here\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-6\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">Expense Summary</h2>\r\n      {gameState.expenses.map(exp => (\r\n        <div key={exp.name} className=\"flex items-center justify-between mb-2 bg-gray-100 p-2 rounded\">\r\n          <div className=\"flex items-center\">\r\n            <span className=\"text-2xl mr-2\">{exp.icon}</span>\r\n            <span className=\"font-medium\">{exp.name}</span>\r\n          </div>\r\n          <div className=\"text-right\">\r\n            <span className=\"mr-4\">${exp.spent.toFixed(2)} / ${exp.budget.toFixed(2)}</span>\r\n            <button \r\n              onClick={() => {\r\n                const newAmount = prompt(`Enter new amount for ${exp.name}:`, exp.spent);\r\n                if (newAmount !== null && !isNaN(newAmount)) {\r\n                  handleEditExpense(exp.name, newAmount);\r\n                }\r\n              }}\r\n              className=\"bg-blue-500 text-white px-2 py-1 rounded mr-2 text-sm\"\r\n            >\r\n              Edit\r\n            </button>\r\n            <button \r\n              onClick={() => {\r\n                if (window.confirm(`Are you sure you want to delete the expense for ${exp.name}?`)) {\r\n                  handleDeleteExpense(exp.name);\r\n                }\r\n              }}\r\n              className=\"bg-red-500 text-white px-2 py-1 rounded text-sm\"\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseSummary;","import React from 'react';\r\n\r\nconst Achievements = ({ gameState }) => {\r\n  return (\r\n    <div className=\"mb-6\">\r\n      <h2 className=\"text-xl font-semibold mb-2\">Achievements</h2>\r\n      <div className=\"grid grid-cols-2 gap-2\">\r\n        {gameState.playerAchievements.map(achievement => (\r\n          <div key={achievement.name} className={`flex items-center p-2 bg-gray-100 rounded ${achievement.reached ? 'opacity-100' : 'opacity-50'}`}>\r\n            <span className=\"text-2xl mr-2\">{achievement.icon}</span>\r\n            <div>\r\n              <div className=\"font-medium\">{achievement.name}</div>\r\n              <div className=\"text-sm\">{achievement.description}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Achievements;","import React from 'react';\r\nimport PlayerStats from './PlayerStats';\r\nimport FinancialDashboard from './FinancialDashboard';\r\nimport QuestLog from './QuestLog';\r\nimport CityMap from './CityMap';\r\nimport BudgetManagement from './BudgetManagement';\r\nimport ExpenseSummary from './ExpenseSummary';\r\nimport Achievements from './Achievements';\r\n\r\nconst GameInterface = ({ gameState, setGameState }) => {\r\n  const handleResetGame = () => {\r\n    if (window.confirm(\"Are you sure you want to reset the game? All progress will be lost.\")) {\r\n      localStorage.clear();\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"font-sans\">\r\n      <h1 className=\"text-3xl font-bold text-center mb-6\">Financial Adventure: Road to Prosperity</h1>\r\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\r\n        <div className=\"col-span-2\">\r\n          <h2 className=\"text-xl font-semibold mb-2\">Your Financial Journey</h2>\r\n          <p className=\"bg-gray-100 p-4 rounded\">{gameState.story}</p>\r\n        </div>\r\n        <PlayerStats gameState={gameState} />\r\n      </div>\r\n      <div className=\"grid grid-cols-2 gap-4 mb-6\">\r\n        <FinancialDashboard gameState={gameState} />\r\n        <QuestLog gameState={gameState} setGameState={setGameState} />\r\n      </div>\r\n      <CityMap gameState={gameState} setGameState={setGameState} />\r\n      <BudgetManagement gameState={gameState} setGameState={setGameState} />\r\n      <ExpenseSummary gameState={gameState} setGameState={setGameState} />\r\n      <Achievements gameState={gameState} />\r\n      <button\r\n        onClick={handleResetGame}\r\n        className=\"w-full p-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors\"\r\n      >\r\n        Reset Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameInterface;","import React from 'react';\r\nimport useGameState from '../hooks/useGameState';\r\nimport GameSetup from './GameSetup';\r\nimport GameInterface from './GameInterface';\r\n\r\nconst FinancialAdventureGame = () => {\r\n  const [gameState, updateGameState] = useGameState();\r\n\r\n  console.log('Current game state:', gameState);\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen p-5 bg-gray-100\">\r\n      <div className=\"max-w-4xl w-full bg-white rounded-lg shadow-md p-8\">\r\n        {!gameState.gameStarted ? (\r\n          <GameSetup gameState={gameState} setGameState={updateGameState} />\r\n        ) : (\r\n          <GameInterface gameState={gameState} setGameState={updateGameState} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinancialAdventureGame;","import React from 'react';\r\nimport FinancialAdventureGame from './components/FinancialAdventureGame';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <FinancialAdventureGame />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksavior\"] = self[\"webpackChunksavior\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [338], () => (__webpack_require__(294)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","months","initialGameState","totalIncome","incomeInput","gameStarted","setupStep","totalSpent","selectedCategories","categories","categoryInputs","expenses","selectedCategory","inputAmount","message","score","scoreBreakdown","base","streak","lastPlayDate","playerAchievements","name","description","icon","reached","currentMonth","Date","getMonth","currentYear","getFullYear","currentLocation","questLog","playerLevel","story","GAME_CONSTANTS","_useState2","useState","savedState","localStorage","getItem","console","log","JSON","parse","gameState","setGameState","useEffect","setItem","stringify","newState","prevState","updatedState","_objectSpread","_ref","React","className","type","value","onChange","e","target","updateGameState","placeholder","onClick","income","parseFloat","isNaN","concat","allCategories","map","category","key","includes","filter","cat","length","handleCategorySelection","color","budget","reduce","acc","_defineProperty","budgets","Object","entries","_ref2","_ref3","find","some","sum","spent","toFixed","quest","index","questIndex","_","locations","updateStoryBasedOnLocation","location","newLocation","handleCategoryClick","style","backgroundColor","amount","exp","newAmount","prompt","categoryName","handleEditExpense","expenseToDelete","window","confirm","achievement","PlayerStats","FinancialDashboard","QuestLog","CityMap","BudgetManagement","ExpenseSummary","Achievements","clear","reload","_useGameState2","useGameState","GameInterface","GameSetup","FinancialAdventureGame","ReactDOM","document","getElementById","render","App","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","keys","every","splice","r","o","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","id","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}